// TKBMS v1.0 -----------------------------------------------------
//
// PLATFORM		: WIN32 XENON
// PRODUCT		: ALL
// VISIBILITY	: PUBLIC
//
// ------------------------------------------------------TKBMS v1.0

#ifndef _HK_COMMON_SHADER_HEADER__H
#define _HK_COMMON_SHADER_HEADER__H

//
// Common defines
//

#ifdef _XBOX
// as we use a proper depth resolve (with bias) we don't need epsilon in here
#define SHADOW_EPSILON 0.0
#else
#define SHADOW_EPSILON 0.0001
#endif

#define ALPHA_DISCARD_TOLERANCE 0.004 

#define SHADOW_16F_DISTRIBUTE_FACTOR 32

#ifdef HKG_DX10
cbuffer perObject {
#endif

// Common matrices
float4x4 g_mWorldInvTranspose			: WorldInverseTranspose;
float4x4 g_mWorld			: World;
float4x4 g_mWorldViewProj	: WorldViewProjection;

#ifdef HKG_DX10
};
cbuffer perCamera {
#endif

float4x4 g_mViewProj;
float4x4 g_mView;
float4x4 g_mViewToLightProj;  // for shadow maps
float4x4 g_mViewToLightProj1; // for Parallel split shadow maps
float4x4 g_mViewToLightProj2; // for Parallel split shadow maps
float4x4 g_mViewToLightProj3; // for Parallel split shadow maps

#ifdef HKG_DX10
};

cbuffer perLight {
#endif

// Lights 
// Main (key) light
float4 g_vLightDir : Direction  = {0.0f, 1.0f, 0.0f, 1.0f}; // world space
float4 g_vLightDirView : Direction  = {0.0f, 1.0f, 0.0f, 1.0f}; // view space
float4 g_cLightColor : Diffuse = {1.0f, 1.0f, 1.0f, 1.0f};
float4 g_vLightShadowStartPosWorld; 
float4 g_vLightShadowStartPosView; 

// Can handle 2 lights and a rim light 

float4 g_vLight1Dir : Direction  = {0.0f, 1.0f, 0.0f, 1.0f}; // world space
float4 g_cLight1Color : Diffuse = {1.0f, 1.0f, 1.0f, 1.0f};

float4 g_cLightRimColor : Diffuse; 
float g_iNumLights; // normally 1, can be 2 with these shaders

#ifdef HKG_DX10
};

cbuffer perMaterial {
#endif

// Material
float4 g_cAmbientColor	: MaterialAmbient = {0.0f, 0.0f, 0.0f, 1.0f};
float4 g_cDiffuseColor	: MaterialDiffuse = {1.0f, 1.0f, 1.0f, 1.0f};
float4 g_cSpecularColor	: MaterialSpecular = {1.0f, 1.0f, 1.0f, 1.0f};
float  g_cSpecularPower	: Power = 30.0; // 1..128

#ifdef HKG_DX10
};

cbuffer generalSettings {
#endif

// Common constants
float  g_iShadowMapSize		= 1024;
float  g_fShadowMapDistance = 100; // Distance from light / light proj to end of shadow map volume
float  g_fShadowVsmEpsilon  = 0.0001; 
float  g_fShadowVsmBias     = 0.0001; 
float4 m_fShadowSplitDistances; // view space z distances to the far end of each map

float4 g_cFogColor;
float4 g_iFogParams;
float4 g_iDepthParams; // x == LinearDepth output enabled. y == AlphaBlend enabled.

#ifdef HKG_DX10
};
#endif

sampler g_sSamplerZero  : register(s0);		// Shadow Map0, or T0
sampler g_sSamplerOne   : register(s1);		// Shadow Map1, or T1
sampler g_sSamplerTwo   : register(s2);		// Shadow Map2, or T2
sampler g_sSamplerThree : register(s3);		// Shadow Map3, or T3
sampler g_sSamplerFour  : register(s4);		// if PSVSM, T0, 
sampler g_sSamplerFive  : register(s5);		// if PSVSM, T1, 
sampler g_sSamplerSix   : register(s6);		// if PSVSM, T2,
sampler g_sSamplerSeven : register(s7);		// if PSVSM, T3


#ifdef HKG_DX10
	// Overlapping cube/2d semantics for texture slots not supported in DX10 at the moment
	// so have to use #defines to limit pixel shaders visible on compile
	// and then select the correct def here (expand to 2darray etc)
	#ifdef HKG_CUBEMAP_SLOT0
		TextureCube<float4> TexCube0 : register(t0);
	#else
		Texture2D<float4> Tex2D0 : register(t0);
	#endif
	
	#ifdef HKG_CUBEMAP_SLOT1
		TextureCube<float4> TexCube1 : register(t1);
	#else
		Texture2D<float4> Tex2D1 : register(t1);
	#endif
	
	#ifdef HKG_CUBEMAP_SLOT2
		TextureCube<float4> TexCube2 : register(t2);
	#else
		Texture2D<float4> Tex2D2 : register(t2);
	#endif
	
	#ifdef HKG_CUBEMAP_SLOT3
		TextureCube<float4> TexCube3 : register(t3);
	#else
		Texture2D<float4> Tex2D3 : register(t3);
	#endif
	
	#ifdef HKG_CUBEMAP_SLOT4
		TextureCube<float4> TexCube4 : register(t4);
	#else
		Texture2D<float4> Tex2D4 : register(t4);
	#endif
	
	#ifdef HKG_CUBEMAP_SLOT5
		TextureCube<float4> TexCube5 : register(t5);
	#else
		Texture2D<float4> Tex2D5 : register(t5);
	#endif
	
	#ifdef HKG_CUBEMAP_SLOT6
		TextureCube<float4> TexCube6 : register(t6);
	#else
		Texture2D<float4> Tex2D6 : register(t6);
	#endif
	
	#ifdef HKG_CUBEMAP_SLOT7
		TextureCube<float4> TexCube7 : register(t7);
	#else
		Texture2D<float4> Tex2D7 : register(t7);
	#endif

#endif

#include "CommonSampleHeader.hlslh"


//
// Structures
//

	struct vertexInputUnlitT1 {
		float3 position			: POSITION;
		float2 texCoord0		: TEXCOORD0;
#ifdef HKG_INSTANCING
		float4 transformRow0    : TEXCOORD5; 
		float4 transformRow1    : TEXCOORD6;
		float4 transformRow2	: TEXCOORD7;
#endif
	};
    
// Vertex Input 
	struct vertexInputT0 {
		float3 position			: POSITION;
		float3 normal			: NORMAL;
#ifdef HKG_VCOLOR		
		float4 vertColor		: COLOR0;
#endif
#ifdef HKG_INSTANCING
		float4 transformRow0    : TEXCOORD5; 
		float4 transformRow1    : TEXCOORD6;
		float4 transformRow2	: TEXCOORD7;
#endif	
	};

	
// One tex coord
	struct vertexInputT1 {
		float3 position			: POSITION;
		float3 normal			: NORMAL;
		float2 texCoord0		: TEXCOORD0;
#ifdef HKG_VCOLOR		
		float4 vertColor		: COLOR0;
#endif
#ifdef HKG_INSTANCING
		float4 transformRow0    : TEXCOORD5; 
		float4 transformRow1    : TEXCOORD6;
		float4 transformRow2	: TEXCOORD7;
#endif	
	};
	
	struct vertexInputT1B {
		float4 position  : POSITION; 	
		float3 normal    : NORMAL; 	
		float2 texCoord0 : TEXCOORD0; 	
		float3 tangent   : TANGENT; 
		float3 binormal  : BINORMAL;	
#ifdef HKG_INSTANCING
		float4 transformRow0    : TEXCOORD5; 
		float4 transformRow1    : TEXCOORD6;
		float4 transformRow2	: TEXCOORD7;
#endif
	};
	
	struct vertexInputT2 {
		float3 position			: POSITION;
		float3 normal			: NORMAL;
		float2 texCoord0		: TEXCOORD0;
		float2 texCoord1		: TEXCOORD1;
#ifdef HKG_VCOLOR		
		float4 vertColor		: COLOR0;
#endif
#ifdef HKG_INSTANCING
		float4 transformRow0    : TEXCOORD5; 
		float4 transformRow1    : TEXCOORD6;
		float4 transformRow2	: TEXCOORD7;
#endif
	};

	struct vertexInputT2B {
		float4 position  : POSITION; 	
		float3 normal    : NORMAL; 	
		float2 texCoord0 : TEXCOORD0; 	
		float2 texCoord1 : TEXCOORD1; 	
		float3 tangent   : TANGENT; 
		float3 binormal  : BINORMAL;	
#ifdef HKG_INSTANCING
		float4 transformRow0    : TEXCOORD5; 
		float4 transformRow1    : TEXCOORD6;
		float4 transformRow2	: TEXCOORD7;
#endif
	};

	struct vertexOutputUnlitT1 {
		float4 position			: POSITION;
		float2 texCoord0		: TEXCOORD0;
		float3 posView			: TEXCOORD1;
	};

// Vertex Output
	struct vertexOutputT0 {
		float4 position			: POSITION;
		float3 posView			: TEXCOORD0;
		float4 diffColor0		: COLOR0;
		float4 diffColor1		: COLOR1;
		float4 specCol0			: TEXCOORD1;
	};
	
// One tex coord
	struct vertexOutputT1 {
		float4 position			: POSITION;
		float2 texCoord0		: TEXCOORD0;
		float3 posView			: TEXCOORD1;
		float4 diffColor0		: COLOR0;
		float4 diffColor1		: COLOR1;
		float4 specCol0			: TEXCOORD2;
	};

	struct vertexOutputT1B {
		float4 position    : POSITION;  // clip space
		float2 texCoord0   : TEXCOORD0;
		float4 posView	   : TEXCOORD1;
		float4 L0	       : TEXCOORD2; // tangent space
		float4 E           : TEXCOORD4;
	};
	
	struct vertexOutputT1BR {
		float4 position     : POSITION;  // clip space
		float2 texCoord0    : TEXCOORD0;
		float4 posView	    : TEXCOORD1;
		float4 L0		 	: TEXCOORD2; // tangent space
		float4 E            : TEXCOORD3; // tangent space
		float4 TangToWorld0 : TEXCOORD4; // e.X in .w
		float4 TangToWorld1 : TEXCOORD5; // e.Y in .w
		float4 TangToWorld2 : TEXCOORD6; // e.Z in .w
	
	};
		

// Two tex coords
	struct vertexOutputT2 {
		float4 position			: POSITION;
		float2 texCoord0		: TEXCOORD0;
		float2 texCoord1		: TEXCOORD1;
		float3 posView			: TEXCOORD2;
		float4 diffColor0		: COLOR0;
		float4 diffColor1		: COLOR1;
		float4 specCol0			: TEXCOORD3;
	};

	struct vertexOutputT2B {
		float4 position    : POSITION;  // clip space
		float2 texCoord0   : TEXCOORD0;
		float2 texCoord1   : TEXCOORD1;
		float4 posView	   : TEXCOORD2;
		float4 L0          : TEXCOORD3; // tangent space
		float4 E           : TEXCOORD4;
	};

	struct vertexOutputT2BR {
		float4 position     : POSITION;  // clip space
		float2 texCoord0    : TEXCOORD0;
		float2 texCoord1    : TEXCOORD1;
		float4 posView	    : TEXCOORD2;
		float4 L0           : TEXCOORD3; // light vec in tangent space
		float4 E            : TEXCOORD4; // light vec in tangent space
		float4 TangToWorld0 : TEXCOORD5; // e.X in .w
		float4 TangToWorld1 : TEXCOORD6; // e.Y in .w
		float4 TangToWorld2 : TEXCOORD7; // e.Z in .w
	};

	struct vertexOutputShadowT0 {
		float4 position			: POSITION;
		float4 posLight			: TEXCOORD0;
		float3 posView			: TEXCOORD1;
		#ifdef HKG_SHADOWS_VSM
  			float4 posLight1	: TEXCOORD2; 
			float4 posLight2	: TEXCOORD3; 
			float4 posLight3	: TEXCOORD4; 
		#endif
		float4 diffColor0		: COLOR0;
		float4 diffColor1		: COLOR1;
		float4 specCol0			: TEXCOORD5;
	};

	struct vertexOutputShadowUnlitT1 {
		float4 position			: POSITION;
		float2 texCoord0		: TEXCOORD0;
		float4 posLight			: TEXCOORD1;
		float3 posView			: TEXCOORD2;
		#ifdef HKG_SHADOWS_VSM
    		float4 posLight1	: TEXCOORD3; 
			float4 posLight2	: TEXCOORD4; 
			float4 posLight3	: TEXCOORD5; 
		#endif
	};

// One tex coord, with shadow proj
	struct vertexOutputShadowT1 {
		float4 position			: POSITION;
		float2 texCoord0		: TEXCOORD0;
		float4 posLight			: TEXCOORD1;
		float3 posView			: TEXCOORD2;
		#ifdef HKG_SHADOWS_VSM
  			float4 posLight1	: TEXCOORD3; 
			float4 posLight2	: TEXCOORD4; 
			float4 posLight3	: TEXCOORD5; 
		#endif
		float4 diffColor0		: COLOR0;
		float4 diffColor1		: COLOR1;
		float4 specCol0			: TEXCOORD6;
	};

	struct vertexOutputShadowT1B {
		float4 position			: POSITION;
		float2 texCoord0		: TEXCOORD0;
		float4 posLight			: TEXCOORD1;
		float4 posView	 		: TEXCOORD2; // .w = L1.x
		#ifdef HKG_SHADOWS_VSM
  			float4 posLight1	: TEXCOORD3; 
			float4 posLight2	: TEXCOORD4; 
			float4 posLight3	: TEXCOORD5; 
			float4 L0			: TEXCOORD6; // .w = L1.y
			float4 E			: TEXCOORD7; // .w = L1.z
		#else
			float4 L0				: TEXCOORD3;
			float4 E				: TEXCOORD5;
		#endif
	};
	
	struct vertexOutputShadowT1BR {
		float4 position			: POSITION;
		float2 texCoord0		: TEXCOORD0;
		float4 posLight			: TEXCOORD1;
		float4 posView	 		: TEXCOORD2;// .w = L1.x
		#ifdef HKG_SHADOWS_VSM
  			//XX Need to do some packing so we can fit in extra PSVSM map coords
			//   for now, Bump+Reflect will just not index > map 0
  			//float4 posLight1			: TEXCOORD2;
			//float4 posLight2			: TEXCOORD3;
			//float4 posLight3			: TEXCOORD4;
		#endif
		float4 L0				: TEXCOORD3; // .w = L1.y
		float4 E				: TEXCOORD4; // .w = L1.z
		float4 TangToWorld0		: TEXCOORD5; // e.X in .w
		float4 TangToWorld1		: TEXCOORD6; // e.Y in .w
		float4 TangToWorld2		: TEXCOORD7; // e.Z in .w
	};
	
// Two tex coords, with shadow proj
	struct vertexOutputShadowT2 {
		float4 position			: POSITION;
		float4 texCoord01		: TEXCOORD0;
		float4 posLight			: TEXCOORD1;
		float3 posView			: TEXCOORD2;
		#ifdef HKG_SHADOWS_VSM
  			float4 posLight1	: TEXCOORD3; 
			float4 posLight2	: TEXCOORD4; 
			float4 posLight3	: TEXCOORD5; 
		#endif
		float4 diffColor0		: COLOR0;
		float4 diffColor1		: COLOR1;
		float4 specCol0			: TEXCOORD6;
	};

	struct vertexOutputShadowT2B {
		float4 position			: POSITION;
		float4 texCoord01		: TEXCOORD0;
		float4 posLight			: TEXCOORD1;     
		float4 posView			: TEXCOORD2; // .w = L1.x
		#ifdef HKG_SHADOWS_VSM
  			float4 posLight1		: TEXCOORD3; 
			float4 posLight2		: TEXCOORD4; 
			float4 posLight3		: TEXCOORD5; 
			float4 L0				: TEXCOORD6;// .w = L1.y
			float4 E				: TEXCOORD7;// .w = L1.z
		#else
			float4 L0				: TEXCOORD3;
			float4 E				: TEXCOORD4;
		#endif
	};

	struct vertexOutputShadowT2BR {
		float4 position			: POSITION;
		float4 texCoord01		: TEXCOORD0;
		float4 posLight			: TEXCOORD1;
		float4 posView			: TEXCOORD2;// .w = L1.x
		#ifdef HKG_SHADOWS_VSM
			//XX Need to do some packing so we can fit in extra PSVSM map coords
			//   for now, Bump+Reflect will just not index > map 0
  			//float4 posLight1			: TEXCOORD2;
			//float4 posLight2			: TEXCOORD3;
			//float4 posLight3			: TEXCOORD4;
		#endif
		float4 L0				: TEXCOORD3;// .w = L1.y
		float4 E				: TEXCOORD4;// .w = L1.z
		float4 TangToWorld0		: TEXCOORD5; // e.X in .w
		float4 TangToWorld1		: TEXCOORD6; // e.Y in .w
		float4 TangToWorld2		: TEXCOORD7; // e.Z in .w
	};

//
// Shadow map create shaders
//
	struct vertexInputShadowDepth {
		float3 position			: POSITION;
	#ifdef ENABLE_ALPHA_SHADOWS
		float2 texCoord0		: TEXCOORD0;
	#endif
	#ifdef HKG_INSTANCING
		float4 transformRow0    : TEXCOORD5; 
		float4 transformRow1    : TEXCOORD6;
		float4 transformRow2	: TEXCOORD7;
	#endif
	};

	struct vertexOutputShadowDepth {
		float4 position			: POSITION;
		float4 depthZZZW		: TEXCOORD0;
	#ifdef ENABLE_ALPHA_SHADOWS
		float2 texCoord0		: TEXCOORD1;
	#endif
	};

	struct vertexOutputShadowDepthVSM {
		float4 position			: POSITION;
		float3 posWorld		    : TEXCOORD0;
	#ifdef ENABLE_ALPHA_SHADOWS
		float2 texCoord0		: TEXCOORD1;
	#endif
	};

//
// Pixel output: Color 
//
	struct pixelOutput
	{
		float4 color			: COLOR0;  
		float4 pzDepth			: COLOR1; // We normally ourput posView.z in X, so that we can use it for SSAO later on (if wanted) 
	};










//
// Util Funcs
//

float4 computeFog( in float viewZ, in float4 c )
{
	float scale = 0;
	float depth = viewZ;
	if (g_iFogParams.x > 2 ) // EXP2
	{	
		float ddensity = depth*g_iFogParams.w;
		scale = 1.0 / exp( ddensity*ddensity ); // 1/(e^((d*density)^2))
	}
	else if (g_iFogParams.x > 1 ) // EXP
	{
		float ddensity = depth*g_iFogParams.w;
		scale = 1.0 / exp( ddensity ); // 1/(e^(d*density))
	}
	else if (g_iFogParams.x > 0 ) // LINEAR
	{
		scale = (g_iFogParams.z - depth) / (g_iFogParams.z - g_iFogParams.y);
	}
	
	scale = clamp(scale, 0, 1);
	float3 crgb = ( (1 - scale) * g_cFogColor.xyz ) + ( scale * c.rgb );
	return float4(crgb.rgb, c.a); 
}

float smoothstep(float min, float max, float input)
{
	return (clamp((input - min) / (max - min), 0, 1));
}

void LightVertexDiffuseOnly( in float3 vert, in float3 objectNormal, out float L0diff, out float L1diff )
{
	float3 N = mul( objectNormal, (float3x3)g_mWorldInvTranspose ); //normal vector
    float3 L0 = g_vLightDir.xyz; 
    L0diff = max(0, dot(N,L0));
    float3 L1 = g_vLightDir.xyz;
    L1diff = max(0, dot(N,L1));
}

void MaterialContributionDiffuseOnly( float3 light0Diffuse, float3 light1Diffuse, out float4 diff )
{
	float3 ambColor = g_cDiffuseColor.rgb * g_cAmbientColor.rgb;
    float3 diffColor = g_cDiffuseColor.rgb * ( (light0Diffuse.rgb * g_cLightColor.rgb) + (light1Diffuse.rgb * g_cLight1Color.rgb) );
    diff.rgb = diffColor.rgb + ambColor.rgb;
    diff.a = g_cDiffuseColor.a;     
}


float4 Phong(float NdotL, float NdotH, float specularPower) 
{
	float diffuse = max(NdotL, 0.0);
	NdotH = max(NdotH, 0.0);
	float specular = pow(NdotH, specularPower) * dot(g_cSpecularColor.rgb, g_cSpecularColor.rgb);
	if (NdotL <= 0) specular = 0;
	return float4(diffuse, diffuse, diffuse, specular);
}

void LightVertex( in float3 vert, in float3 N, in float3 eye, out float4 Light0, out float4 Light1 )
{
	float3 E = normalize( eye - vert ); //eye vector
    float3 L = g_vLightDir.xyz; //light vector
    float3 H = normalize( E + L ); //half angle vector
    Light0 = Phong( dot(N,L), dot(N,H), g_cSpecularPower);
	
	if (g_iNumLights > 1)
	{
		float3 L1 = g_vLight1Dir.xyz; //light vector
		float3 H1 = normalize( E + L1 ); //half angle vector
		Light1 = Phong( dot(N,L1), dot(N,H1), 0);
	}
	else
	{
		Light1.xyzw = 0; 
	}
}

void MaterialContribution( float4 vertexColor, float4 light0DiffuseAndSpec, float4 light1DiffuseAndSpec, out float4 diff0, out float4 diff1, out float4 spec0 )
{
	float4 vertMatColor = vertexColor * g_cDiffuseColor;
	float3 ambColor = g_cAmbientColor.rgb;
    float3 diffColor0 = light0DiffuseAndSpec.rgb * g_cLightColor.rgb;
    float3 diffColor1 = light1DiffuseAndSpec.rgb * g_cLight1Color.rgb;
    
    diff0.rgb = vertMatColor.rgb * ( diffColor0.rgb + ambColor.rgb );
    diff0.a = vertMatColor.a; 
    
    diff1.rgb = vertMatColor.rgb * diffColor1.rgb;
    diff1.a = 0; // we add lights together, so don't want alpha doubled up
    
	spec0.rgb = g_cSpecularColor.rgb * (g_cLightColor.rgb * light0DiffuseAndSpec.w);
    spec0.a = 0;
}

void packBumpLights( in float3 L0, in float3 L1, in float3 E, in float3 posView, out float4 posViewP, out float4 L0P, out float4 EP )
{
	posViewP.xyz = posView.xyz;
	posViewP.w = L1.x;
	
	L0P.xyz = L0.xyz;
	L0P.w = L1.y;
	
	EP.xyz = E.xyz;
	EP.w = L1.z;
}

void unpackBumpLights( in float3 N, in float4 posView, in float4 L0, in float4 E, out float NdotL0, out float NdotL1, out float NdotH0 )
{
	float3 L1 = float3( posView.w, L0.w, E.w );
	float3 NE = normalize( E.xyz );
	float3 H = normalize( NE + L0.xyz );
	
	NdotL0 = dot( N, L0.xyz );
	NdotL1 = dot( N, L1 );
	NdotH0 = dot( N, H );		
}

///
/// ATI style shadow map lookup
///
float getLightAmountNoHW( float4 posLight )
{
	float2 shadowTexCoord = posLight.xy / posLight.w;
	float  shadowTestDepth = (posLight.z / posLight.w) - SHADOW_EPSILON; //-->make it a bit closer, only use if no way to use _proper_ depth bias etc
				
    // transform to texel space
    float2 texelpos = g_iShadowMapSize * shadowTexCoord;
        
    // Determine the lerp amounts           
    float2 lerps = frac( texelpos );

    //read in bilerp stamp, doing the shadow checks
    float sourcevals[4];
    float oneTexel = 1.0/g_iShadowMapSize;
    
 #ifdef HKG_DX10
	#ifndef HKG_CUBEMAP_SLOT0
		sourcevals[0] = (Tex2D0.Sample( g_sSamplerZero, shadowTexCoord ).r < shadowTestDepth)? 0.0f: 1.0f;  
		sourcevals[1] = (Tex2D0.Sample( g_sSamplerZero, shadowTexCoord + float2(oneTexel, 0) ).r < shadowTestDepth)? 0.0f: 1.0f;  
		sourcevals[2] = (Tex2D0.Sample( g_sSamplerZero, shadowTexCoord + float2(0, oneTexel) ).r < shadowTestDepth)? 0.0f: 1.0f;  
		sourcevals[3] = (Tex2D0.Sample( g_sSamplerZero, shadowTexCoord + float2(oneTexel, oneTexel) ).r < shadowTestDepth)? 0.0f: 1.0f;  
	#endif
 #else
    sourcevals[0] = (tex2D( g_sSamplerZero, shadowTexCoord ).r < shadowTestDepth)? 0.0f: 1.0f;  
    sourcevals[1] = (tex2D( g_sSamplerZero, shadowTexCoord + float2(oneTexel, 0) ).r < shadowTestDepth)? 0.0f: 1.0f;  
    sourcevals[2] = (tex2D( g_sSamplerZero, shadowTexCoord + float2(0, oneTexel) ).r < shadowTestDepth)? 0.0f: 1.0f;  
    sourcevals[3] = (tex2D( g_sSamplerZero, shadowTexCoord + float2(oneTexel, oneTexel) ).r < shadowTestDepth)? 0.0f: 1.0f;  
 #endif
        
    // lerp between the shadow values to calculate our light amount
    float lightAmount = lerp( lerp( sourcevals[0], sourcevals[1], lerps.x ),
                                lerp( sourcevals[2], sourcevals[3], lerps.x ),
                                lerps.y );

	return lightAmount;                                                       
}

///
/// Variance Shadow map lookup
///
#ifdef HKG_DX10
float getLightAmountPSVSM( float4 posLight, float3 posView, sampler shadowSampler, Texture2D texMap )
#else
float getLightAmountPSVSM( float4 posLight, float3 posView, sampler shadowMap )
#endif
{
	float2 shadowTexCoord = posLight.xy / posLight.w;
	
	// Lookup assumes Bil. filtering supported on the float textures
	#ifdef HKG_NO_FLOATBLENDING 
	
		float2 texelpos = g_iShadowMapSize * shadowTexCoord;
		float2 lerps = frac( texelpos );
		float4 sourcevals[4];
		float oneTexel = 1.0/g_iShadowMapSize;
	    
	#ifdef HKG_DX10
		sourcevals[0] = texMap.Sample( shadowSampler, shadowTexCoord );  
		sourcevals[1] = texMap.Sample( shadowSampler, shadowTexCoord + float2(oneTexel, 0) );  
		sourcevals[2] = texMap.Sample( shadowSampler, shadowTexCoord + float2(0, oneTexel) );  
		sourcevals[3] = texMap.Sample( shadowSampler, shadowTexCoord + float2(oneTexel, oneTexel) );  
	#else
	    sourcevals[0] = tex2D( shadowMap, shadowTexCoord );  
		sourcevals[1] = tex2D( shadowMap, shadowTexCoord + float2(oneTexel, 0) );  
		sourcevals[2] = tex2D( shadowMap, shadowTexCoord + float2(0, oneTexel) );  
		sourcevals[3] = tex2D( shadowMap, shadowTexCoord + float2(oneTexel, oneTexel) );  
	#endif
	        
		// lerp between the shadow values to calculate our light amount
		float4 moments = lerp( lerp( sourcevals[0], sourcevals[1], lerps.x ),
									lerp( sourcevals[2], sourcevals[3], lerps.x ),
									lerps.y );

	#else
	
		#ifdef HKG_DX10
			float4 moments = texMap.Sample( shadowSampler, shadowTexCoord);
		#else
			float4 moments = tex2D(shadowMap, shadowTexCoord);
		#endif
	#endif

	#ifdef HKG_SHADOWS_DISTRIBUTE_16F_OUTPUTS 
		  moments.xy += (moments.zw / SHADOW_16F_DISTRIBUTE_FACTOR);
	#endif
		
	// Rescale light distance and check if we're in shadow
	
	float3 lightDir = g_vLightShadowStartPosView - posView;
	float distFromLight = dot(lightDir,g_vLightDirView); 
	float rescaledDistToLight = distFromLight / g_fShadowMapDistance; 
	rescaledDistToLight -= g_fShadowVsmBias; 
	float litFactor = (moments.x > 0.99999f) || (moments.r >= rescaledDistToLight); // || (moments.x > 0.95); // if moment.x (depth) > rescaled, then not in shadow. May add check here for detecting 'off the edge of map'(always lit in our demos)
	
	// Variance shadow mapping
	float E_x2 = moments.g;
	float Ex_2 = moments.r * moments.r;
	float variance = min(max(E_x2 - Ex_2, 0.0) + g_fShadowVsmEpsilon, 1.0);
	float m_d = (moments.r - rescaledDistToLight);
	float p = variance / (variance + (m_d * m_d));
	
	p = smoothstep(0.3f, 1.0f, p); // clip off bottom to reduce light bleeding
	
	return max(litFactor, p);
}

float getLightAmountVSM( float4 posLight0, float4 posLight1, float4 posLight2, float4 posLight3, float3 posView )
{
#ifdef HKG_DX10
	#if defined(HKG_CUBEMAP_SLOT0) || defined(HKG_CUBEMAP_SLOT1) || defined(HKG_CUBEMAP_SLOT2) || defined(HKG_CUBEMAP_SLOT3)
		return 1; // should not be useding cubemap shadow map slots from main shader
	#else
		if ( posView.z < m_fShadowSplitDistances.x)
			return getLightAmountPSVSM( posLight0, posView, g_sSamplerZero, Tex2D0  );
		else if ( posView.z < m_fShadowSplitDistances.y)
			return getLightAmountPSVSM( posLight1, posView, g_sSamplerOne, Tex2D1 );
		else if ( posView.z < m_fShadowSplitDistances.z)
			return getLightAmountPSVSM( posLight2, posView, g_sSamplerTwo, Tex2D2 );
		else 
			return getLightAmountPSVSM( posLight3, posView, g_sSamplerThree, Tex2D3 );
	#endif
#else
	if ( posView.z < m_fShadowSplitDistances.x)
		return getLightAmountPSVSM( posLight0, posView, g_sSamplerZero );
	else if ( posView.z < m_fShadowSplitDistances.y)
		return getLightAmountPSVSM( posLight1, posView, g_sSamplerOne );
	else if ( posView.z < m_fShadowSplitDistances.z)
		return getLightAmountPSVSM( posLight2, posView, g_sSamplerTwo );
	else 
		return getLightAmountPSVSM( posLight3, posView, g_sSamplerThree );
#endif
}
	
float getLightAmountSM( float4 posLight )
{
#ifndef HKG_DX10
	#ifdef HKG_SHADOWS_HARDWARE // NV h/w lookup of depth buffer
		return ( tex2Dproj(g_sSamplerZero, posLight).r ); // white or black, so red is all we need.
	#else
		return getLightAmountNoHW( posLight ); 
	#endif
#else // DX10 always uses VSM anyway so should never get here
	return 1;
#endif
}


#endif //_HK_COMMON_SHADER_HEADER__H